
project("powermock-reflect") {
    description = "Various utilities for accessing internals of a class."

    dependencies {
        compile("org.objenesis:objenesis")
        testCompile("junit:junit")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project("powermock-core") {
    description = "Various utilities for accessing internals of a class."

    sourceSets {
        test {
            compileClasspath = compileClasspath + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
    }

    dependencies {
        compile(project(":powermock-reflect"))
        compile("org.javassist:javassist")

        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")

        provided("org.mockito:mockito-core:${mockito1Version}")
        mockito2("org.mockito:mockito-core:${mockito2Version}")
    }

    check.dependsOn mockito2Test
}

project("powermock-api:powermock-api-support"){
    description = "PowerMock API Utility classes."

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        testCompile("junit:junit")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project("powermock-api:powermock-api-easymock"){
    description = "PowerMock API Utility classes."

    dependencies {
        compile(project(":powermock-api:powermock-api-support"))
        compile("cglib:cglib-nodep")
        provided("org.easymock:easymock")
        testCompile("junit:junit")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project("powermock-api:powermock-api-mockito-common"){
    description = "PowerMock API for Mockito. Common classes."

    sourceSets {
        main {
            compileClasspath = compileClasspath + configurations.provided + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
        test {
            compileClasspath = compileClasspath + configurations.provided + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
    }

    dependencies {
        compile(project(":powermock-api:powermock-api-support"))

        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")

        provided("org.mockito:mockito-core:${mockito1Version}")

        mockito2("org.mockito:mockito-core:${mockito2Version}")
        mockito2(project(":powermock-api:powermock-api-support"))
    }

    task mockito2Jar(type: Jar) {
        baseName = project.name + "-mockito2"
        dependsOn mainMockito2Classes
        from sourceSets.mainMockito2.output
    }

    artifacts {
        mockito2 mockito2Jar
    }

    check.dependsOn testMockito2Classes
}

project("powermock-api:powermock-api-mockito"){
    description = "PowerMock API for Mockito 1.+.."

    sourceSets {
        main {
            compileClasspath = compileClasspath + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
        test {
            compileClasspath = compileClasspath + configurations.provided + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
    }

    dependencies {
        compile(project(path:":powermock-api:powermock-api-mockito-common"))
        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
        provided("org.mockito:mockito-core:${mockito1Version}")
    }
}

project("powermock-api:powermock-api-mockito2"){
    description = "PowerMock API for Mockito 2.+.."

    sourceSets {
        main {
            compileClasspath = compileClasspath + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
        test {
            compileClasspath = compileClasspath + configurations.provided + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.provided
        }
    }

    dependencies {
        compile(project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2"))
        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
        provided("org.mockito:mockito-core:${mockito2Version}")
    }
}

project("powermock-tests:powermock-tests-utils"){
    description = "Common set of classes to test PowerMock features in mocking framework modules."

    dependencies {
        compile(project(":powermock-core"))
        compile("javax.servlet:servlet-api")
    }
}

project(":powermock-classloading:powermock-classloading-base"){
    description = "Utilities for loading and executing classes."

    dependencies {
        compile(project(":powermock-api:powermock-api-support"))
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}


project(":powermock-classloading:powermock-classloading-objenesis"){
    description = "Performs classloader deep-cloning using Objenesis."

    dependencies {
        compile(project(":powermock-classloading:powermock-classloading-base"))
        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-classloading:powermock-classloading-xstream"){
    description = "Performs classloader deep-cloning using X-Stream."

    dependencies {
        compile(project(":powermock-classloading:powermock-classloading-base"))
        compile("com.thoughtworks.xstream:xstream")
        testCompile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent"){
    description = "PowerMock Java agent support."

    dependencies {
        compile(project(":powermock-core"))
        provided("junit:junit")
    }

    jar {
        manifest {
            attributes(
                    "Manifest-Version": "1.0",
                    "Premain-Class": "org.powermock.modules.agent.PowerMockAgent",
                    "Agent-Class": "org.powermock.modules.agent.PowerMockAgent",
                    "Can-Retransform-Classes": true,
                    "Can-Redefine-Classes": true
            )
        }
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit3"){
    description = "PowerMock support module for JUnit 3.x."

    dependencies {
        compile(project(":powermock-core"))
        compile("junit:junit:3.8.2")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-common"){
    description = "PowerMock support module for all versions of JUnit 4.x."

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        compile("junit:junit")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit4"){
    description = "PowerMock support module for JUnit 4.x."

    dependencies {
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-common"))
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
        testCompile("org.easymock:easymock")
        testCompile("cglib:cglib-nodep")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-legacy"){
    description = "PowerMock support module for JUnit 4.0-4.3."

    dependencies {
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-common")){
            exclude group: 'junit', module: 'junit'
        }
        compile("junit:junit:4.3")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
        testCompile(project(":powermock-tests:powermock-tests-utils"))
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule"){
    description = "PowerMock support module for JUnit 4.x rules."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-classloading:powermock-classloading-base"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-common"))
        provided("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
        testCompile(project(":powermock-tests:powermock-tests-utils"))
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule-agent"){
    description = "PowerMock support module for JUnit 4.x rules with Java agent"

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent"))
        provided("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-testng-common"){
    description = "PowerMock module for TestNG. Common classes"

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        compile("org.testng:testng")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-testng"){
    description = "PowerMock module for TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng-common"))
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-impl:powermock-module-testng-agent"){
    description = "PowerMock module for TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng-common"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent"))
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-junit4"){
    description = "Tests for junit4 module."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4"))
        compile("junit:junit")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-testng"){
    description = "Tests for testng module."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng"))
        testCompile("org.testng:testng")
        testCompile("org.assertj:assertj-core")
        testCompile("org.hamcrest:hamcrest-core")
    }

    test{
        useTestNG(){
            suites 'suite.xml'
        }
    }
}

List easymock = ["org.easymock:easymock","org.assertj:assertj-core",project(":powermock-api:powermock-api-easymock"),project(":powermock-tests:powermock-tests-utils")]

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit3"){
    description = "Tests for EasyMock module with JUnit 3.x."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:3.8.2")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit3"))
    }

    test{
        exclude "**/StupidPrivateFinalTest*"
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit4-agent") {
    description = "Tests for PowerMock Java agent with JUnit4 and Easymock"

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule-agent"))
    }

    def pathToAgent = project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent").jar.outputs.files.getFiles()[0];

    test {
        jvmArgs "-javaagent:${pathToAgent}"
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit4-legacy"){
    description = "Tests for EasyMock module with JUnit 4.0-4.3."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.3")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-legacy"))
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit4"){
    description = " Tests for EasyMock module with JUnit 4.x."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.4")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }

    test{
        exclude "**/*Defect*"
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit45"){
    description = " Tests for EasyMock module with JUnit 4.x."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.5")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }

    test{
        exclude "**/*Defect*"
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit47"){
    description = " Tests for EasyMock module with JUnit 4.7."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.7")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit48"){
    description = " Tests for EasyMock module with JUnit 4.8.x."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.8.2")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit410"){
    description = " Tests for EasyMock module with JUnit 4.10."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.10")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-junit412"){
    description = " Tests for EasyMock module with JUnit 4.12."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:4.12")
        testCompile easymock
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")){
            exclude group: 'junit', module: 'junit'
        }
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-testng"){
    description = "Tests for EasyMock module with TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng"))
        testCompile easymock
        testCompile("org.testng:testng")
        testCompile("org.assertj:assertj-core")
    }

    test{
        useTestNG(){
            suites 'suite.xml'
        }
    }
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-easymock:powermock-module-test-easymock-testng-agent"){
    description = "Tests for EasyMock module with TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng"))
        testCompile easymock
        testCompile("org.testng:testng")
        testCompile("org.assertj:assertj-core")
        testCompile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng-agent"))
    }

    def pathToAgent = project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent").jar.outputs.files.getFiles()[0];

    test {
        useTestNG(){
            suites 'suite.xml'
        }

        jvmArgs "-javaagent:${pathToAgent}"
    }
}

List junitTests = ["junit:junit:${junitVersion}", "org.assertj:assertj-core", "org.hamcrest:hamcrest-core",project(":powermock-tests:powermock-tests-utils")]

List mockito1Libs = [
project(":powermock-api:powermock-api-mockito"),"org.mockito:mockito-core:${mockito1Version}"]

List mockito2Lbs = [project(":powermock-api:powermock-api-mockito2"),"org.mockito:mockito-core:${mockito2Version}"]

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4") {
    description = "Tests for Mockito module with JUnit 4.x."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")

        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit49") {
    description = "Tests for Mockito module with JUnit 4.9.x."

    dependencies {
        testCompile "junit:junit:4.9"
        testCompile "org.assertj:assertj-core"
        testCompile "org.hamcrest:hamcrest-core"
        testCompile project(":powermock-tests:powermock-tests-utils")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")

        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-rule-objenesis") {
    description = "Tests for PowerMock Rule using Objenesis Deepcloning."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-classloading:powermock-classloading-objenesis")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-rule-xstream") {
    description = "Tests for PowerMock Rule using XStream Deepcloning."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-classloading:powermock-classloading-xstream")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-agent"){
    description = "Tests for PowerMock Java agent with JUnit4 and Mockito."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-classloading:powermock-classloading-xstream")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule-agent")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    def pathToAgent = project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent").jar.outputs.files.getFiles()[0];

    test {
        jvmArgs "-javaagent:${pathToAgent}"
    }

    mockito2Test {
        jvmArgs "-javaagent:${pathToAgent}"
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-delegate") {
    description = "Tests for PowerMock JUnit4 runner-delegate and Mockito."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")

        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")

    }

    test{
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-testng"){
    description = "Tests for Mockito module with TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-modules-impl:powermock-module-testng"))
        compile(project(":powermock-tests:powermock-tests-utils"))
        testCompile mockito1Libs
        testCompile("org.testng:testng")
        testCompile("org.assertj:assertj-core")

        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")

    }

    test{
        useTestNG(){
            suites 'suite.xml'
            environment "mockitoVersion", "${mockito1Version}"
        }
    }

    mockito2Test{
        useTestNG(){
            suites 'suite.xml'
            environment "mockitoVersion", "${mockito2Version}"
        }
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-java8") {
    description = "Tests for Mockito module with JUnit 4.x. and Java8."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileMainMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-java8-agent"){
    description = "Tests for PowerMock Java agent with JUnit4, Mockito and java ."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-classloading:powermock-classloading-xstream")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule-agent")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    def pathToAgent = project(":powermock-modules:powermock-modules-impl:powermock-module-javaagent").jar.outputs.files.getFiles()[0];

    test {
        jvmArgs "-javaagent:${pathToAgent}"
    }

    mockito2Test {
        jvmArgs "-javaagent:${pathToAgent}"
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileMainMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    check.dependsOn mockito2Test
}

project(":powermock-modules:powermock-modules-test:powermock-module-test-mockito:powermock-module-test-mockito-junit4-java8-rule-xstream") {
    description = "Tests for Mockito module with JUnit 4.x, Java8 and rules-xstream."

    dependencies {
        testCompile junitTests
        testCompile project(":powermock-classloading:powermock-classloading-xstream")
        testCompile project(":powermock-modules:powermock-modules-impl:powermock-module-junit4-rule")
        testCompile mockito1Libs
        testCompile project(path:":powermock-api:powermock-api-mockito-common")
        mockito2 mockito2Lbs
        mockito2 project(path:":powermock-api:powermock-api-mockito-common", configuration: "mockito2")
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileMainMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestMockito2Java{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    check.dependsOn mockito2Test
}