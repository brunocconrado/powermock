assert project == rootProject

def commonTestLoggingSettings = {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
}

def afterSuiteClosure = {
    desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println ""
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println ""
        }
}

configure(subprojects) { project ->
    repositories {
        mavenCentral()
    }

    group = 'org.powermock'

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        dependencies {
            dependency("org.objenesis:objenesis:${objenesisVersion}")
            dependency("org.javassist:javassist:${javassistVersion}")
            dependency("org.assertj:assertj-core:${assertjVersion}")
            dependency("org.easymock:easymock:${easymockVersion}"){
                exclude group: 'cglib', module: 'cglib-nodep'
            }
            dependency("cglib:cglib-nodep:${cglibVersion}")
            dependency("junit:junit:${junitVersion}") {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            dependency("org.hamcrest:hamcrest-core:${hamcrestVersion}")
            dependency("javax.servlet:servlet-api:${servletVersion}")
            dependency("com.thoughtworks.xstream:xstream:${xstreamVersion}")
            dependency("org.testng:testng:${testngVersion}")
        }
    }

    apply plugin: "java"

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    compileTestJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        options.compilerArgs += "-parameters"
    }

    tasks.withType(JavaCompile) {
        options.warnings = false
    }

    configurations {
        provided
        mockito2
    }

    sourceSets {
        main {
            compileClasspath = compileClasspath + configurations.provided
        }
        test {
            compileClasspath = compileClasspath + configurations.provided
        }
        mainMockito2 {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
            output.resourcesDir = 'build/classes/mockito2'
            output.classesDir   = 'build/classes/mockito2'
            compileClasspath = sourceSets.main.compileClasspath + configurations.mockito2 + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.mockito2
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
        }
        testMockito2 {
            java.srcDirs = ['src/test']
            resources.srcDirs = ['src/test/resources']
            output.resourcesDir = 'build/classes/testmockito2'
            output.classesDir   = 'build/classes/testmockito2'
            compileClasspath = sourceSets.test.compileClasspath + configurations.mockito2 + configurations.provided
            runtimeClasspath = output + compileClasspath  + configurations.mockito2
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
        }
    }

    task mockito2Test(type: Test) {
        description = 'Runs the test with Mockito 2'
        group = 'verification'
        testClassesDir = sourceSets.testMockito2.output.classesDir
        classpath = sourceSets.testMockito2.runtimeClasspath

        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])

        testLogging commonTestLoggingSettings << {
            afterSuite afterSuiteClosure
        }

        reports.junitXml.destination = 'build/mockito2-test-results'
        reports.html.destination = 'build/reports/mockito2Test'
    }

    test{
        testLogging  commonTestLoggingSettings << {
            afterSuite afterSuiteClosure
        }
    }

    apply from: "${gradleScriptDir}/javadoc.gradle"

    mockito2Test.mustRunAfter test

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
